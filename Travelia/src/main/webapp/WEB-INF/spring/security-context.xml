<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- ** 옵션 설명  **
		auto-config = 기본으로 filter 자동 설정(HTTP basic Authentication, Form login authentication, Logout)
		use-expressions = true일때 SpEL 사용 (기본 =  true)
		create-session = 권한이 필요한 페이지 접근시 로그인 페이지로 리다이렉트, 로그인 후 세션아이디 생성
		disable-url-rewriting = url에 jsessionid가 붙는걸  방지,ㅋㅋㅋ
			invalidate-session = 세션을 삭제 여부
			delete-cookies = jsessionid, remember-me 등 로그인에 관련된 쿠키 및 세션 삭제 -->
				
	<!--Security Test	-->
  	<security:http auto-config="true" use-expressions="true">
  		<security:intercept-url pattern ="/login" access="hasRole('ROLE_USER')"/>		
  		<security:form-login login-page="/"
  							authentication-success-handler-ref="loginSuccessHandler"
  							authentication-failure-handler-ref="loginFailureHandler"/>
  		<security:logout logout-url ="/logout" 
  						 logout-success-url="/"
  						 invalidate-session ="true"/>

	<!--<security:http auto-config="false" use-expressions="true" create-session="never" disable-url-rewriting="true">
		<security:form-login 		
					login-processing-url = "/login/loginPrc"					
					authentication-failure-url="/login/fail"
					always-use-default-target="true"/>
					
		<security:logout invalidate-session="true" 
					logout-success-url="/" delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"/>-->	
		<!-- 자동 로그인 
			key=...?SSS
			token-validity-seconds=세션유지시간(브라우저 닫은 뒤에도 자동 로그인)	
		<remember-me key="kjs" token-validity-seconds="2419200"/> -->					 
	</security:http>
	<!-- 로그인 Action  -->
	<bean id = "userService" class="com.kitri.travelia.security.CustomizeUserDetailsService"/>
	<!-- 로그인 성공, 실패  -->
	<bean id ="loginSuccessHandler" class="com.kitri.travelia.security.CustomizeAuthenticationSuccessHandler"/>
	<bean id ="loginFailureHandler" class="com.kitri.travelia.security.CustomizeAuthenticationFailureHandler"/> 
	<!-- 패스워드 암호화 (Bcrypt/org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder)-->
	<bean id ="encoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder"/>
	
	<!-- 로그인 처리 설정 
		user-service-ref의 id를 가진 클래스로 접근해 로그인 처리
		password-encoder = 해당 encoder를 이용해 사용자가 입력한 패스워드를 암호화 하여 비교-->
	<security:authentication-manager>
	<!--  <security:authentication-provider ref="customAuthenticationProvider" />-->
	<security:authentication-provider user-service-ref="userService">
			<!--<security:password-encoder ref="encoder"/>-->
		</security:authentication-provider>		
	</security:authentication-manager>

</beans>
